NAME
    Object::Declare - Declarative object constructor

SYNOPSIS
        use Object::Declare ['MyApp::Column', 'MyApp::Param'];

        my %objects = declare {

        param foo =>
           !is global,
            is immutable,
            valid_values are qw( more values );

        column bar =>
            field1 is 'value',
            field2 is 'some_other_value',
            sub_params are param( is happy ), param ( is sad );

        };

        print $objects{foo}; # a MyApp::Param object
        print $objects{bar}; # a MyApp::Column object

        # Assuming that MyApp::Column::new simply blesses into a hash...
        print $objects{bar}{sub_params}[0]; # a MyApp::Param object
        print $objects{bar}{sub_params}[1]; # a MyApp::Param object

DESCRIPTION
    This module exports one function, "declare", for building named objects
    with a declarative syntax, similar to how Jifty::DBI::Schema defines its
    columns.

    In list context, "declare" returns a list of name/object pairs in the
    order of declaration (allowing duplicates), suitable for putting into a
    hash. In scalar context, "declare" returns a hash reference.

    Using a flexible "import" interface, one can change exported helper
    functions names (*declarator*), words to link labels and values together
    (*copula*), and the table of named classes to declare (*mapping*):

        use Object::Declare
            declarator  => ['declare'],     # list of declarators
            copula      => {                # list of words, or a map
                is  => '',                  #  from copula to label prefixes,
                are => '',                  #  or to callback that e.g. turns
                has => sub { has => @_ },   #  "has X" to "has is X" and
                                            #  "X has 1" to "has is [X => 1]"
            },
            aliases     => {                # list of label aliases:
                more => 'less',             #  turns "is more" into "is less"
                                            #  and "more is 1" into "less is 1"
            },
            mapping     => {
                column => 'MyApp::Column',  # class name to call ->new to
                param  => sub {             # arbitrary coderef also works
                    bless(\@_, 'MyApp::Param');
                },
            };

    After the declarator block finishes execution, all helper functions are
    removed from the package. Same-named functions (such as &is and &are)
    that existed before the declarator's execution are restored correctly.

NOTES
    If you export the declarator to another package via @EXPORT, be sure to
    export all mapping keys as well. For example, this will work for the
    example above:

        our @EXPORT = qw( declare column param );

    But this will not:

        our @EXPORT = qw( declare );

    The copula are not turned into functions, so there is no need to export
    them.

AUTHORS
    Audrey Tang <cpan@audreyt.org>

COPYRIGHT
    Copyright 2006, 2007 by Audrey Tang <cpan@audreyt.org>.

    This software is released under the MIT license cited below.

  The "MIT" License
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

